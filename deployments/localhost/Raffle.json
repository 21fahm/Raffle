{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "participants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        }
      ],
      "name": "RAFFLE_UPKEEPNOTNEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__CLOSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NOTENOUGHFUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TRANSFERFAILED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funders",
          "type": "address"
        }
      ],
      "name": "EventRaffle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNoOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVrfAddress",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb7247d809c50799135c1240aa83c3fd4f9dcd76d306080eb6de2f923d84bd4e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1335678",
    "logsBloom": "0x
    "blockHash": "0x539b67ccd72acf1553e0d58b5d4df010fdde2b7f5c8bc542b6693fefa9f67354",
    "transactionHash": "0xfb7247d809c50799135c1240aa83c3fd4f9dcd76d306080eb6de2f923d84bd4e",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1335678",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "500000",
    "30",
    "1"
  ],
  "numDeployments": 1,
  "solcInputHash": "c62f811b8d241fc190c59ab8dd1732b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"RAFFLE_UPKEEPNOTNEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__CLOSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NOTENOUGHFUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TRANSFERFAILED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funders\",\"type\":\"address\"}],\"name\":\"EventRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfAddress\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"testdev810308\",\"details\":\"This is an untamparable contract that uses chainlink to achieve automation and randomness.\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This function helps the chainlink nodes to keep check if an update is needed if the upKeepNeeded is true. The following should be true inorder  to return true: 1.Our time interval has passed. 2.Their is atleast 1 funder and the contract has some money. 3.Our subscription is funded with link 4.The lottery should be in an \\\"open\\\" state.\"}},\"title\":\"This is a decentralized lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Raffle__NOTENOUGHFUNDS();\\r\\nerror Raffle__CLOSED();\\r\\nerror Raffle__TRANSFERFAILED();\\r\\nerror RAFFLE_UPKEEPNOTNEEDED(\\r\\n    uint256 balance,\\r\\n    uint256 participants,\\r\\n    uint256 state\\r\\n);\\r\\n\\r\\n/**\\r\\n * @title This is a decentralized lottery contract\\r\\n * @author testdev810308\\r\\n * @dev This is an untamparable contract that uses chainlink to achieve automation and randomness.\\r\\n */\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    //Type variables\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    //State variables\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_participants;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subId;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private immutable i_callBackGasLimit;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    //Lottery variable\\r\\n    address payable private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    event EventRaffle(address indexed funders);\\r\\n    event RequestedRaffleWinner(uint256 indexed id);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinator,\\r\\n        uint256 amount,\\r\\n        bytes32 gasLane,\\r\\n        uint32 callBackGasLimit,\\r\\n        uint256 interval,\\r\\n        uint64 subId\\r\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\\r\\n        i_entranceFee = amount;\\r\\n        i_gasLane = gasLane;\\r\\n        i_subId = subId;\\r\\n        i_callBackGasLimit = callBackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function fundContract() public payable {\\r\\n        if (msg.value > i_entranceFee) {\\r\\n            revert Raffle__NOTENOUGHFUNDS();\\r\\n        }\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__CLOSED();\\r\\n        }\\r\\n        s_participants.push(payable(msg.sender));\\r\\n        emit EventRaffle(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function helps the chainlink nodes to keep\\r\\n     * check if an update is needed if the upKeepNeeded is true.\\r\\n     * The following should be true inorder  to return true:\\r\\n     * 1.Our time interval has passed.\\r\\n     * 2.Their is atleast 1 funder and the contract has some money.\\r\\n     * 3.Our subscription is funded with link\\r\\n     * 4.The lottery should be in an \\\"open\\\" state.\\r\\n     */\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /*checkData*/\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\\r\\n    {\\r\\n        bool isOpen = (s_raffleState == RaffleState.OPEN);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayes = (s_participants.length > 0);\\r\\n        bool hasMoney = (address(this).balance > 0);\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayes && hasMoney);\\r\\n        return (upkeepNeeded, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\r\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upKeepNeeded) {\\r\\n            revert RAFFLE_UPKEEPNOTNEEDED(\\r\\n                address(this).balance,\\r\\n                s_participants.length,\\r\\n                uint256(s_raffleState)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane, //Max amount of fee you are willing to pay for a request\\r\\n            i_subId, //SUB ID used by this contract for funding requests\\r\\n            REQUEST_CONFIRMATIONS, // No of blocks the nodes wait before responding\\r\\n            i_callBackGasLimit, // Control gas used by the fullfillRandomWords function\\r\\n            NUM_WORDS // NO. pf random words required\\r\\n        );\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /* requestId*/,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 randomWinnerIndex = randomWords[0] % s_participants.length;\\r\\n        address payable lastWinner = s_participants[randomWinnerIndex];\\r\\n        s_recentWinner = lastWinner;\\r\\n        s_participants = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        (bool success, ) = lastWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__TRANSFERFAILED();\\r\\n        }\\r\\n        emit WinnerPicked(lastWinner);\\r\\n    }\\r\\n\\r\\n    function getAmount() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getParticipants(uint256 index) public view returns (address) {\\r\\n        return s_participants[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNoOfPlayers() public view returns (uint256) {\\r\\n        return s_participants.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimestamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmation() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n\\r\\n    function getVrfAddress() public view returns (VRFCoordinatorV2Interface) {\\r\\n        return i_vrfCoordinator;\\r\\n    }\\r\\n\\r\\n    function getCallGasLimit() public view returns (uint32) {\\r\\n        return i_callBackGasLimit;\\r\\n    }\\r\\n\\r\\n    function getGasLane() public view returns (bytes32) {\\r\\n        return i_gasLane;\\r\\n    }\\r\\n\\r\\n    function getSubId() public view returns (uint64) {\\r\\n        return i_subId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d4f5980fa6d3e5feb4dfa9d29da4b2a5a2d2422446ab0e5139c01bf13f790ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a8538038062001a85833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508460a081815250508360e081815250508067ffffffffffffffff166101008167ffffffffffffffff16815250508263ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508161014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600063ffffffff82169050919050565b62000229816200020e565b81146200023557600080fd5b50565b60008151905062000249816200021e565b92915050565b600067ffffffffffffffff82169050919050565b6200026e816200024f565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a0162000238565b93505060806200031089828a01620001bc565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161169a620003eb6000396000818161072c01526107af0152600081816105f801526107d70152600081816105d50152610a440152600081816105b4015261096e0152600081816105780152610a1c0152600081816107fd01526109ea0152600081816103f7015261044b015261169a6000f3fe6080604052600436106100fe5760003560e01c8063ae4c28a711610095578063ca6a9ef811610064578063ca6a9ef814610307578063d321fe2914610332578063f43b52cb1461035d578063f831335414610388578063fbc6ba6f146103b3576100fe565b8063ae4c28a71461026a578063bd097e2114610295578063c19dd76b1461029f578063c1e3bd3e146102ca576100fe565b8063473f1ddc116100d1578063473f1ddc146101ab57806353a2c19a146101d65780636e04ff0d1461020157806391ad27b41461023f576100fe565b8063115cbaf5146101035780631fe543e31461012e578063319b97c4146101575780634585e33b14610182575b600080fd5b34801561010f57600080fd5b506101186103de565b6040516101259190610db7565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190610f75565b6103f5565b005b34801561016357600080fd5b5061016c6104b5565b6040516101799190610fe0565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190611056565b6104c1565b005b3480156101b757600080fd5b506101c06106b1565b6040516101cd91906110e4565b60405180910390f35b3480156101e257600080fd5b506101eb6106db565b6040516101f89190610fe0565b60405180910390f35b34801561020d57600080fd5b50610228600480360381019061022391906111b4565b6106ea565b604051610236929190611297565b60405180910390f35b34801561024b57600080fd5b506102546107ab565b6040516102619190610fe0565b60405180910390f35b34801561027657600080fd5b5061027f6107d3565b60405161028c91906112e6565b60405180910390f35b61029d6107fb565b005b3480156102ab57600080fd5b506102b461096a565b6040516102c1919061131a565b60405180910390f35b3480156102d657600080fd5b506102f160048036038101906102ec9190611335565b610992565b6040516102fe91906110e4565b60405180910390f35b34801561031357600080fd5b5061031c6109d9565b6040516103299190610fe0565b60405180910390f35b34801561033e57600080fd5b506103476109e6565b6040516103549190610fe0565b60405180910390f35b34801561036957600080fd5b50610372610a0e565b60405161037f9190610fe0565b60405180910390f35b34801561039457600080fd5b5061039d610a18565b6040516103aa91906113c1565b60405180910390f35b3480156103bf57600080fd5b506103c8610a40565b6040516103d591906113ff565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161049e92919061141a565b60405180910390fd5b6104b18282610a68565b5050565b60008080549050905090565b60006104db604051806020016040528060008152506106ea565b5090508061054a5747600080549050600160149054906101000a900460ff16600181111561050c5761050b610d40565b5b6040517f272dbf9b00000000000000000000000000000000000000000000000000000000815260040161054193929190611443565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561056f5761056e610d40565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610639959493929190611497565b6020604051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c91906114ff565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60006060600080600181111561070357610702610d40565b5b600160149054906101000a900460ff16600181111561072557610724610d40565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610759919061155b565b119050600080600080549050119050600080471190508380156107795750825b80156107825750815b801561078b5750805b955085604051806020016040528060008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341115610855576040517f1e7a2e9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561086957610868610d40565b5b600160149054906101000a900460ff16600181111561088b5761088a610d40565b5b146108c2576040517fbf0bdfb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f9850a5128ac73f62e4b3d7fa713eb4aedc9725ac9701abd5c59e6b7819527a9d60405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109a7576109a661158f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600361ffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808054905082600081518110610a8357610a8261158f565b5b6020026020010151610a9591906115ed565b90506000808281548110610aac57610aab61158f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b3557610b34610e32565b5b604051908082528060200260200182016040528015610b635781602001602082028036833780820191505090505b5060009080519060200190610b79929190610c99565b50426002819055506000600160146101000a81548160ff02191690836001811115610ba757610ba6610d40565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610bd29061164f565b60006040518083038185875af1925050503d8060008114610c0f576040519150601f19603f3d011682016040523d82523d6000602084013e610c14565b606091505b5050905080610c4f576040517f49dfff8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d12579160200282015b82811115610d115782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cb9565b5b509050610d1f9190610d23565b5090565b5b80821115610d3c576000816000905550600101610d24565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d8057610d7f610d40565b5b50565b6000819050610d9182610d6f565b919050565b6000610da182610d83565b9050919050565b610db181610d96565b82525050565b6000602082019050610dcc6000830184610da8565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610df981610de6565b8114610e0457600080fd5b50565b600081359050610e1681610df0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e6a82610e21565b810181811067ffffffffffffffff82111715610e8957610e88610e32565b5b80604052505050565b6000610e9c610dd2565b9050610ea88282610e61565b919050565b600067ffffffffffffffff821115610ec857610ec7610e32565b5b602082029050602081019050919050565b600080fd5b6000610ef1610eec84610ead565b610e92565b90508083825260208201905060208402830185811115610f1457610f13610ed9565b5b835b81811015610f3d5780610f298882610e07565b845260208401935050602081019050610f16565b5050509392505050565b600082601f830112610f5c57610f5b610e1c565b5b8135610f6c848260208601610ede565b91505092915050565b60008060408385031215610f8c57610f8b610ddc565b5b6000610f9a85828601610e07565b925050602083013567ffffffffffffffff811115610fbb57610fba610de1565b5b610fc785828601610f47565b9150509250929050565b610fda81610de6565b82525050565b6000602082019050610ff56000830184610fd1565b92915050565b600080fd5b60008083601f84011261101657611015610e1c565b5b8235905067ffffffffffffffff81111561103357611032610ffb565b5b60208301915083600182028301111561104f5761104e610ed9565b5b9250929050565b6000806020838503121561106d5761106c610ddc565b5b600083013567ffffffffffffffff81111561108b5761108a610de1565b5b61109785828601611000565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ce826110a3565b9050919050565b6110de816110c3565b82525050565b60006020820190506110f960008301846110d5565b92915050565b600080fd5b600067ffffffffffffffff82111561111f5761111e610e32565b5b61112882610e21565b9050602081019050919050565b82818337600083830152505050565b600061115761115284611104565b610e92565b905082815260208101848484011115611173576111726110ff565b5b61117e848285611135565b509392505050565b600082601f83011261119b5761119a610e1c565b5b81356111ab848260208601611144565b91505092915050565b6000602082840312156111ca576111c9610ddc565b5b600082013567ffffffffffffffff8111156111e8576111e7610de1565b5b6111f484828501611186565b91505092915050565b60008115159050919050565b611212816111fd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611252578082015181840152602081019050611237565b60008484015250505050565b600061126982611218565b6112738185611223565b9350611283818560208601611234565b61128c81610e21565b840191505092915050565b60006040820190506112ac6000830185611209565b81810360208301526112be818461125e565b90509392505050565b600063ffffffff82169050919050565b6112e0816112c7565b82525050565b60006020820190506112fb60008301846112d7565b92915050565b6000819050919050565b61131481611301565b82525050565b600060208201905061132f600083018461130b565b92915050565b60006020828403121561134b5761134a610ddc565b5b600061135984828501610e07565b91505092915050565b6000819050919050565b600061138761138261137d846110a3565b611362565b6110a3565b9050919050565b60006113998261136c565b9050919050565b60006113ab8261138e565b9050919050565b6113bb816113a0565b82525050565b60006020820190506113d660008301846113b2565b92915050565b600067ffffffffffffffff82169050919050565b6113f9816113dc565b82525050565b600060208201905061141460008301846113f0565b92915050565b600060408201905061142f60008301856110d5565b61143c60208301846110d5565b9392505050565b60006060820190506114586000830186610fd1565b6114656020830185610fd1565b6114726040830184610fd1565b949350505050565b600061ffff82169050919050565b6114918161147a565b82525050565b600060a0820190506114ac600083018861130b565b6114b960208301876113f0565b6114c66040830186611488565b6114d360608301856112d7565b6114e060808301846112d7565b9695505050505050565b6000815190506114f981610df0565b92915050565b60006020828403121561151557611514610ddc565b5b6000611523848285016114ea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061156682610de6565b915061157183610de6565b92508282039050818111156115895761158861152c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115f882610de6565b915061160383610de6565b925082611613576116126115be565b5b828206905092915050565b600081905092915050565b50565b600061163960008361161e565b915061164482611629565b600082019050919050565b600061165a8261162c565b915081905091905056fea26469706673582212201aed3c83d5bfc3336b6bc5bd88baf5ee48811d90610a7211fd5d04b0d5f2244f64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c8063ae4c28a711610095578063ca6a9ef811610064578063ca6a9ef814610307578063d321fe2914610332578063f43b52cb1461035d578063f831335414610388578063fbc6ba6f146103b3576100fe565b8063ae4c28a71461026a578063bd097e2114610295578063c19dd76b1461029f578063c1e3bd3e146102ca576100fe565b8063473f1ddc116100d1578063473f1ddc146101ab57806353a2c19a146101d65780636e04ff0d1461020157806391ad27b41461023f576100fe565b8063115cbaf5146101035780631fe543e31461012e578063319b97c4146101575780634585e33b14610182575b600080fd5b34801561010f57600080fd5b506101186103de565b6040516101259190610db7565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190610f75565b6103f5565b005b34801561016357600080fd5b5061016c6104b5565b6040516101799190610fe0565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190611056565b6104c1565b005b3480156101b757600080fd5b506101c06106b1565b6040516101cd91906110e4565b60405180910390f35b3480156101e257600080fd5b506101eb6106db565b6040516101f89190610fe0565b60405180910390f35b34801561020d57600080fd5b50610228600480360381019061022391906111b4565b6106ea565b604051610236929190611297565b60405180910390f35b34801561024b57600080fd5b506102546107ab565b6040516102619190610fe0565b60405180910390f35b34801561027657600080fd5b5061027f6107d3565b60405161028c91906112e6565b60405180910390f35b61029d6107fb565b005b3480156102ab57600080fd5b506102b461096a565b6040516102c1919061131a565b60405180910390f35b3480156102d657600080fd5b506102f160048036038101906102ec9190611335565b610992565b6040516102fe91906110e4565b60405180910390f35b34801561031357600080fd5b5061031c6109d9565b6040516103299190610fe0565b60405180910390f35b34801561033e57600080fd5b506103476109e6565b6040516103549190610fe0565b60405180910390f35b34801561036957600080fd5b50610372610a0e565b60405161037f9190610fe0565b60405180910390f35b34801561039457600080fd5b5061039d610a18565b6040516103aa91906113c1565b60405180910390f35b3480156103bf57600080fd5b506103c8610a40565b6040516103d591906113ff565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161049e92919061141a565b60405180910390fd5b6104b18282610a68565b5050565b60008080549050905090565b60006104db604051806020016040528060008152506106ea565b5090508061054a5747600080549050600160149054906101000a900460ff16600181111561050c5761050b610d40565b5b6040517f272dbf9b00000000000000000000000000000000000000000000000000000000815260040161054193929190611443565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561056f5761056e610d40565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610639959493929190611497565b6020604051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c91906114ff565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60006060600080600181111561070357610702610d40565b5b600160149054906101000a900460ff16600181111561072557610724610d40565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610759919061155b565b119050600080600080549050119050600080471190508380156107795750825b80156107825750815b801561078b5750805b955085604051806020016040528060008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341115610855576040517f1e7a2e9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561086957610868610d40565b5b600160149054906101000a900460ff16600181111561088b5761088a610d40565b5b146108c2576040517fbf0bdfb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f9850a5128ac73f62e4b3d7fa713eb4aedc9725ac9701abd5c59e6b7819527a9d60405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109a7576109a661158f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600361ffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808054905082600081518110610a8357610a8261158f565b5b6020026020010151610a9591906115ed565b90506000808281548110610aac57610aab61158f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b3557610b34610e32565b5b604051908082528060200260200182016040528015610b635781602001602082028036833780820191505090505b5060009080519060200190610b79929190610c99565b50426002819055506000600160146101000a81548160ff02191690836001811115610ba757610ba6610d40565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610bd29061164f565b60006040518083038185875af1925050503d8060008114610c0f576040519150601f19603f3d011682016040523d82523d6000602084013e610c14565b606091505b5050905080610c4f576040517f49dfff8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d12579160200282015b82811115610d115782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cb9565b5b509050610d1f9190610d23565b5090565b5b80821115610d3c576000816000905550600101610d24565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d8057610d7f610d40565b5b50565b6000819050610d9182610d6f565b919050565b6000610da182610d83565b9050919050565b610db181610d96565b82525050565b6000602082019050610dcc6000830184610da8565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610df981610de6565b8114610e0457600080fd5b50565b600081359050610e1681610df0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e6a82610e21565b810181811067ffffffffffffffff82111715610e8957610e88610e32565b5b80604052505050565b6000610e9c610dd2565b9050610ea88282610e61565b919050565b600067ffffffffffffffff821115610ec857610ec7610e32565b5b602082029050602081019050919050565b600080fd5b6000610ef1610eec84610ead565b610e92565b90508083825260208201905060208402830185811115610f1457610f13610ed9565b5b835b81811015610f3d5780610f298882610e07565b845260208401935050602081019050610f16565b5050509392505050565b600082601f830112610f5c57610f5b610e1c565b5b8135610f6c848260208601610ede565b91505092915050565b60008060408385031215610f8c57610f8b610ddc565b5b6000610f9a85828601610e07565b925050602083013567ffffffffffffffff811115610fbb57610fba610de1565b5b610fc785828601610f47565b9150509250929050565b610fda81610de6565b82525050565b6000602082019050610ff56000830184610fd1565b92915050565b600080fd5b60008083601f84011261101657611015610e1c565b5b8235905067ffffffffffffffff81111561103357611032610ffb565b5b60208301915083600182028301111561104f5761104e610ed9565b5b9250929050565b6000806020838503121561106d5761106c610ddc565b5b600083013567ffffffffffffffff81111561108b5761108a610de1565b5b61109785828601611000565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ce826110a3565b9050919050565b6110de816110c3565b82525050565b60006020820190506110f960008301846110d5565b92915050565b600080fd5b600067ffffffffffffffff82111561111f5761111e610e32565b5b61112882610e21565b9050602081019050919050565b82818337600083830152505050565b600061115761115284611104565b610e92565b905082815260208101848484011115611173576111726110ff565b5b61117e848285611135565b509392505050565b600082601f83011261119b5761119a610e1c565b5b81356111ab848260208601611144565b91505092915050565b6000602082840312156111ca576111c9610ddc565b5b600082013567ffffffffffffffff8111156111e8576111e7610de1565b5b6111f484828501611186565b91505092915050565b60008115159050919050565b611212816111fd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611252578082015181840152602081019050611237565b60008484015250505050565b600061126982611218565b6112738185611223565b9350611283818560208601611234565b61128c81610e21565b840191505092915050565b60006040820190506112ac6000830185611209565b81810360208301526112be818461125e565b90509392505050565b600063ffffffff82169050919050565b6112e0816112c7565b82525050565b60006020820190506112fb60008301846112d7565b92915050565b6000819050919050565b61131481611301565b82525050565b600060208201905061132f600083018461130b565b92915050565b60006020828403121561134b5761134a610ddc565b5b600061135984828501610e07565b91505092915050565b6000819050919050565b600061138761138261137d846110a3565b611362565b6110a3565b9050919050565b60006113998261136c565b9050919050565b60006113ab8261138e565b9050919050565b6113bb816113a0565b82525050565b60006020820190506113d660008301846113b2565b92915050565b600067ffffffffffffffff82169050919050565b6113f9816113dc565b82525050565b600060208201905061141460008301846113f0565b92915050565b600060408201905061142f60008301856110d5565b61143c60208301846110d5565b9392505050565b60006060820190506114586000830186610fd1565b6114656020830185610fd1565b6114726040830184610fd1565b949350505050565b600061ffff82169050919050565b6114918161147a565b82525050565b600060a0820190506114ac600083018861130b565b6114b960208301876113f0565b6114c66040830186611488565b6114d360608301856112d7565b6114e060808301846112d7565b9695505050505050565b6000815190506114f981610df0565b92915050565b60006020828403121561151557611514610ddc565b5b6000611523848285016114ea565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061156682610de6565b915061157183610de6565b92508282039050818111156115895761158861152c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115f882610de6565b915061160383610de6565b925082611613576116126115be565b5b828206905092915050565b600081905092915050565b50565b600061163960008361161e565b915061164482611629565b600082019050919050565b600061165a8261162c565b915081905091905056fea26469706673582212201aed3c83d5bfc3336b6bc5bd88baf5ee48811d90610a7211fd5d04b0d5f2244f64736f6c63430008120033",
  "devdoc": {
    "author": "testdev810308",
    "details": "This is an untamparable contract that uses chainlink to achieve automation and randomness.",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This function helps the chainlink nodes to keep check if an update is needed if the upKeepNeeded is true. The following should be true inorder  to return true: 1.Our time interval has passed. 2.Their is atleast 1 funder and the contract has some money. 3.Our subscription is funded with link 4.The lottery should be in an \"open\" state."
      }
    },
    "title": "This is a decentralized lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1165,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_participants",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1182,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 1185,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)1160"
      },
      {
        "astId": 1187,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1160": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}